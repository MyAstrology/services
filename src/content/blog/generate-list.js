const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

// Blog folder-ржПрж░ рж╕ржарж┐ржХ path
const blogDir = path.join(__dirname); // ржПржЗ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕ржм .md ржлрж╛ржЗрж▓ ржерж╛ржХрж▓рзЗ ржарж┐ржХ ржЖржЫрзЗ

// Blog ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ рж╕ржм ржлрж╛ржЗрж▓ ржкрзЬрж╛
const files = fs.readdirSync(blogDir).filter(f => f.endsWith('.md'));

if (files.length === 0) {
  console.warn('тЪая╕П ржХрзЛржирзЛ Markdown (.md) ржмрзНрж▓ржЧ ржкрзЛрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред');
} else {
  console.log(`тД╣я╕П ${files.length} ржЯрж┐ ржмрзНрж▓ржЧ ржкрзЛрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред`);
}

// рж╕ржм post process ржХрж░рж╛
const posts = files.map(file => {
  const filePath = path.join(blogDir, file);
  const content = fs.readFileSync(filePath, 'utf-8');
  const { data } = matter(content);

  return {
    slug: data?.slug || file.replace('.md', ''),
    title: data?.title || 'No Title',
    image: data?.image || '',
    description: data?.description || '',
    date: data?.date || '' // Optional: date ржерж╛ржХрж▓рзЗ ржкрж░рзЗ sorting ржХрж╛ржЬрзЗ рж▓рж╛ржЧржмрзЗ
  };
});

// date ржЕржирзБрж╕рж╛рж░рзЗ sort ржХрж░рж╛ (ржирждрзБржи ржкрзЛрж╕рзНржЯ ржЖржЧрзЗ)
posts.sort((a, b) => new Date(b.date) - new Date(a.date));

// list.json рждрзИрж░рж┐ ржХрж░рж╛
const outputPath = path.join(blogDir, 'list.json');
fs.writeFileSync(outputPath, JSON.stringify(posts, null, 2));

console.log(`тЬЕ list.json рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ: ${outputPath}`);
console.log(`ЁЯУж ржорзЛржЯ ${posts.length} ржЯрж┐ ржкрзЛрж╕рзНржЯ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред`);
